var Gerbil=function(c,b,a){this.success=0;this.failures=0;this.count=0;this.timeout=0;this.queue=new Gerbil.Queue;this.results=new Gerbil.Queue;this.description=c;this.tests=b;this.prettyConsole={log:function(d){return console.log("\033[32m"+d+"\033[0m")},info:function(d){return console.info("\033[34m"+d+"\033[0m")},warn:function(d){return console.warn("\033[33m"+d+"\033[0m")},error:function(d){return console.error("\033[31m"+d+"\033[0m")}};this.logger=typeof(a)=="object"?a:Gerbil.IS_NODE?this.prettyConsole:window.console;this.extractTest=function(d){var e=this.tests[d];delete this.tests[d];return e||function(){}};this.execute=function(f,e){try{f.fn.call(e,f)}catch(d){f.fails(d)}finally{this.results.push(f)}};this.ok=function(d){this.success++;d.scenario.logger.log("   * "+d.name+" ("+d.assertions+" assertions)")};this.fail=function(d){this.failures++;d.scenario.logger.error("   x "+d.name+" - assertion number "+(d.assertions+1)+" failed - "+d.message)};this.postergate=function(d){d.scenario.logger.warn("   ! "+d.message)};this.enqueue=function(){this.setup=this.extractTest("setup");this.before=this.extractTest("before");this.after=this.extractTest("after");this.cleanup=this.extractTest("cleanup");for(var d in this.tests){this.queue.push(new Gerbil.Test(d,this.tests[d],this));this.count++}return this};this.consume=function(){var f=false;var e={};try{this.setup.call(e);while(f=this.queue.pull()){this.before.call(e,f);this.execute(f,e);this.after.call(e,f)}this.cleanup.call(e)}catch(d){throw Gerbil.Error(d)}finally{setTimeout(function(g){g.summary()},this.timeout,this)}};this.summary=function(){var d=false;var e=0;this.logger.info("== Running "+this.description+" ==");while(test=this.results.pull()){if(test.isPending){this.postergate(test)}else{e+=test.assertions;test.failed?this.fail(test):this.ok(test)}}this.logger.warn("All tests completed for "+this.description+": "+this.success+" passed, "+this.failures+" failed of "+this.count+" tests ("+e+" assertions executed)");this.logger.info("")}};Gerbil.IS_NODE=!!(typeof module!=="undefined"&&module.exports);Gerbil.Error=function(b){var a=new Error(b);return a.stack||a.message};Gerbil.Queue=function(){this.queue=[];this.offset=0;this.length=function(){return this.queue.length-this.offset};this.push=function(a){this.queue.push(a)};this.pull=function(){if(this.queue.length===0){return}var a=this.queue[this.offset];if(++this.offset*2>=this.queue.length){this.queue=this.queue.slice(this.offset);this.offset=0}return a}};Gerbil.Test=function(a,c,b){this.name=a;this.scenario=b;this.fn=c;this.assertions=0;this.failed=false;this.isPending=false;this.message=null;this.time=new Date().getTime();this.fails=function(d){this.failed=true;this.message=d}};Gerbil.Test.prototype={setTimeout:function(c,a){var b=this;this.scenario.timeout+=a;return setTimeout(function(){c.apply(b)},a)},pending:function(a){this.isPending=true;this.message=a},assert:function(a){if(!a){throw Gerbil.Error("Assertion Failed")}else{this.assertions++}},assert_throw:function(d,c){this.assertions++;var b=false;try{c();b=d.name+" was expected but not raised."}catch(a){if(typeof a==typeof d){b=d.name+" was expected but "+a.name+" was raised."}}if(b){throw Gerbil.Error(b)}},assert_equal:function(c,a){if(c==undefined||a==undefined){throw Gerbil.Error("attr1 = "+c+" ("+typeof c+") and attr2 = "+a+" ("+typeof a+")")}if(typeof(c)!=typeof(a)){throw Gerbil.Error("Different type "+typeof c+" vs "+typeof a)}this.assertions++;switch(c.constructor){case Array:if(c.length!=a.length){throw Gerbil.Error("Different Lengths")}for(var b=0;b<c.length;b++){if(c[b]!=a[b]){throw Gerbil.Error("Items not equal "+c[b]+" != "+a[b])}}break;case String,Number:if(c!=a){throw Gerbil.Error("Not equal "+c+" != "+a)}break}},};Gerbil.scenario=function(c,b,a){new Gerbil(c,b,a).enqueue().consume()};if(Gerbil.IS_NODE){module.exports=Gerbil}else{var scenario=Gerbil.scenario};